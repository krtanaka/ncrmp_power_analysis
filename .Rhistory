m_p  %>%
ggplot(aes(response, exp(est))) +
geom_point(alpha = 0.2) +
coord_fixed(ratio = 1) +
ylab("predicted_density") +
xlab("observed_density") +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "lm", se = T)
m_p  %>%
ggplot(aes(response, exp(est))) +
geom_point(alpha = 0.2) +
coord_fixed(ratio = 1) +
ylab("prediction") +
xlab("observation") +
geom_abline(intercept = 0, slope = 1) +
geom_smooth(method = "lm", se = T)
#  extract some parameter estimates
sd <- as.data.frame(summary(TMB::sdreport(density_model$tmb_obj)))
r <- density_model$tmb_obj$report()
r
# prediction onto new data grid
load("data/Topography_NOAA_CRM_vol10.RData")
grid = topo
# prediction onto new data grid
load("data/crm/Topography_NOAA_CRM_vol10.RData")
grid = topo
grid$longitude = grid$x
grid$latitude = grid$y
grid = grid %>%
group_by(longitude, latitude) %>%
subset(longitude > range(df$LONGITUDE)[1]) %>%
subset(longitude < range(df$LONGITUDE)[2]) %>%
subset(latitude > range(df$LATITUDE)[1]) %>%
subset(latitude < range(df$LATITUDE)[2]) %>%
summarise(depth = mean(Topography, na.rm = T)*-1)
zone <- (floor((grid$longitude[1] + 180)/6) %% 60) + 1
xy_utm = as.data.frame(cbind(utm = project(as.matrix(grid[, c("longitude", "latitude")]),
paste0("+proj=utm +units=km +zone=", zone))))
colnames(xy_utm) = c("X", "Y"); plot(xy_utm, pch = ".")
grid = cbind(grid, xy_utm)
grid_year = NULL
year = as.vector(unique(df$year))
for (y in 1:length(year)) {
# y = 1
grid_y = grid
grid_y$year = year[[y]]
grid_year = rbind(grid_year, grid_y)
}
grid_year$depth_scaled = scale(log(grid_year$depth+0.0001))
grid_year$depth_scaled2 = grid_year$depth_scaled ^ 2
grid_year_missing = NULL
for (y in 1:length(missing_year)) {
# y = 1
# Add missing years to our grid:
grid_from_missing_yr <- grid_year[grid_year$year ==  missing_year[[y]]-1, ]
grid_from_missing_yr$year <-  missing_year[[y]] # `L` because `year` is an integer in the data
grid_year_missing <- rbind(grid_year_missing, grid_from_missing_yr)
}
# set the area argument to 0.0081 km2 since our grid cells are 90 m x 90 m = 0.0081 square kilometers
p <- predict(density_model,
newdata = grid_year,
return_tmb_object = T, area = 0.0081)
p$data$sp = sp
sdm_output = p$data
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.5, width = 0.5)) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
plot_map_raster(p$data, "exp(est)") + ggtitle("Predicted density (g/sq.m) (fixed effects + all random effects)")
plot_map_raster(p$data, "exp(est_non_rf)") + ggtitle("Prediction (fixed effects only)")
plot_map_raster(p$data, "omega_s") + ggtitle("Spatial random effects only")
plot_map_raster(p$data, "epsilon_st") + ggtitle("Spatiotemporal random effects only")
# look at just the spatiotemporal random effects:
plot_map_raster(p$data, "est_rf") + scale_fill_gradient2()
density_map = ggplot(p$data, aes_string("X", "Y", fill = "exp(est)")) +
geom_tile(aes(height = 0.5, width = 0.5)) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "g/m^2") +
ggtitle("Uku predicted density (fixed effects + random effects)") +
ggdark::dark_theme_minimal() +
theme(legend.position = "right")
# prediction onto new data grid
load("data/crm/Topography_NOAA_CRM_vol10.RData")
topo <- topo %>% subset(x < -157.5 & x > -158.5 & y > 21 & y < 22) #oahu
grid = topo
grid$longitude = grid$x
grid$latitude = grid$y
grid = grid %>%
group_by(longitude, latitude) %>%
subset(longitude > range(df$LONGITUDE)[1]) %>%
subset(longitude < range(df$LONGITUDE)[2]) %>%
subset(latitude > range(df$LATITUDE)[1]) %>%
subset(latitude < range(df$LATITUDE)[2]) %>%
summarise(depth = mean(Topography, na.rm = T)*-1)
zone <- (floor((grid$longitude[1] + 180)/6) %% 60) + 1
xy_utm = as.data.frame(cbind(utm = project(as.matrix(grid[, c("longitude", "latitude")]),
paste0("+proj=utm +units=km +zone=", zone))))
colnames(xy_utm) = c("X", "Y"); plot(xy_utm, pch = ".")
grid = cbind(grid, xy_utm)
grid_year = NULL
year = as.vector(unique(df$year))
for (y in 1:length(year)) {
# y = 1
grid_y = grid
grid_y$year = year[[y]]
grid_year = rbind(grid_year, grid_y)
}
grid_year$depth_scaled = scale(log(grid_year$depth+0.0001))
grid_year$depth_scaled2 = grid_year$depth_scaled ^ 2
grid_year_missing = NULL
for (y in 1:length(missing_year)) {
# y = 1
# Add missing years to our grid:
grid_from_missing_yr <- grid_year[grid_year$year ==  missing_year[[y]]-1, ]
grid_from_missing_yr$year <-  missing_year[[y]] # `L` because `year` is an integer in the data
grid_year_missing <- rbind(grid_year_missing, grid_from_missing_yr)
}
# set the area argument to 0.0081 km2 since our grid cells are 90 m x 90 m = 0.0081 square kilometers
p <- predict(density_model,
newdata = grid_year,
return_tmb_object = T, area = 0.0081)
p$data$sp = sp
sdm_output = p$data
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.5, width = 0.5)) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
plot_map_raster(p$data, "exp(est)") + ggtitle("Predicted density (g/sq.m) (fixed effects + all random effects)")
plot_map_raster(p$data, "exp(est_non_rf)") + ggtitle("Prediction (fixed effects only)")
plot_map_raster(p$data, "omega_s") + ggtitle("Spatial random effects only")
plot_map_raster(p$data, "epsilon_st") + ggtitle("Spatiotemporal random effects only")
# look at just the spatiotemporal random effects:
plot_map_raster(p$data, "est_rf") + scale_fill_gradient2()
density_map = ggplot(p$data, aes_string("X", "Y", fill = "exp(est)")) +
geom_tile(aes(height = 0.5, width = 0.5)) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "g/m^2") +
ggtitle("Uku predicted density (fixed effects + random effects)") +
ggdark::dark_theme_minimal() +
theme(legend.position = "right")
density_map
index <- get_index(p, bias_correct = F)
ggdark::invert_geom_defaults()
relative_biomass = index %>%
ggplot(aes(year, est)) +
geom_line() +
geom_point(size = 3) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, colour = NA) +
xlab('Year') +
# ylab('metric tonnes') +
ylab('total count (n)') +
ggtitle("Biomass estimate") +
ggdark::dark_theme_minimal()
index
ggdark::invert_geom_defaults()
relative_biomass = index %>%
ggplot(aes(year, est)) +
geom_line() +
geom_point(size = 3) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, colour = NA) +
xlab('Year') +
# ylab('metric tonnes') +
ylab('total count (n)') +
ggtitle("Biomass estimate") +
ggdark::dark_theme_minimal()
index
index <- get_index(p, bias_correct = T)
index
ggdark::invert_geom_defaults()
relative_biomass = index %>%
ggplot(aes(year, est)) +
geom_line() +
geom_point(size = 3) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, colour = NA) +
xlab('Year') +
# ylab('metric tonnes') +
ylab('total count (n)') +
ggtitle("Biomass estimate") +
ggdark::dark_theme_minimal()
index %>%
mutate(cv = sqrt(exp(se^2) - 1)) %>%
dplyr::select(-log_est, -max_gradient, -bad_eig, -se) %>%
knitr::kable(format = "pandoc", digits = c(0, 0, 0, 0, 2))
cog <- get_cog(p) # calculate centre of gravity for each data point
cog$utm = ifelse(cog$coord == "X", "Eastings", "Northings")
density_cog = ggplot(cog, aes(year, est, ymin = lwr, ymax = upr)) +
geom_ribbon(alpha = 0.2) +
geom_line() +
geom_point(size = 3) +
facet_wrap(~utm, scales = "free_y") +
ggtitle("Center of gravity") +
ggdark::dark_theme_minimal()
# table of COG by latitude
plot(data.frame(Y = p$data$Y, est = exp(p$data$est), year = p$data$year) %>%
group_by(year) %>% summarize(cog = sum(Y * est) / sum(est)), type = "b", bty = "l", ylab = "Northing")
library(patchwork)
density_map
relative_biomass+density_cog
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")+ scale_fill_gradient2()
?scale_fill_gradient2
plot_map_raster(filter(p$data, year == 2015), "zeta_s") + scale_fill_gradient2()
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
ggplot(dat, aes_string("X", "Y", fill = column)) +
# geom_tile(aes(height = 0.5, width = 0.5)) +
geom_raster() +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
# geom_tile(aes(height = 0.5, width = 0.5)) +
geom_raster() +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
ggplot(dat, aes_string("X", "Y", fill = column)) +
# geom_tile(aes(height = 0.5, width = 0.5)) +
geom_point() +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
# geom_tile(aes(height = 0.5, width = 0.5)) +
geom_point() +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.5, width = 0.5), alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.5, width = 0.5), alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.8, width = 0.8), alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.8, width = 0.8), alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile( alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile( alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.8, width = 0.8), alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.8, width = 0.8), alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
# prediction onto new data grid
load("data/crm/Topography_NOAA_CRM_vol10.RData")
topo <- topo %>% subset(x < -157.5 & x > -158.5 & y > 21 & y < 22) #oahu
grid = topo
topo <- topo %>% subset(x < -157.5 & x > -158.5 & y > 21 & y < 22) #oahu
# prediction onto new data grid
load("data/crm/Topography_NOAA_CRM_vol10.RData")
topo <- topo %>% subset(x < -157.5 & x > -158.5 & y > 21 & y < 22) #oahu
grid = topo
res = 2
grid$longitude = round(grid$x, digits = res)
grid = grid %>%
group_by(longitude, latitude) %>%
subset(longitude > range(df$LONGITUDE)[1]) %>%
subset(longitude < range(df$LONGITUDE)[2]) %>%
subset(latitude > range(df$LATITUDE)[1]) %>%
subset(latitude < range(df$LATITUDE)[2]) %>%
summarise(depth = mean(Topography, na.rm = T)*-1)
# prediction onto new data grid
load("data/crm/Topography_NOAA_CRM_vol10.RData")
topo <- topo %>% subset(x < -157.5 & x > -158.5 & y > 21 & y < 22) #oahu
grid = topo
res = 2
grid$longitude = round(grid$x, digits = res)
grid$latitude = round(grid$y, digits = res)
grid = grid %>%
group_by(longitude, latitude) %>%
subset(longitude > range(df$LONGITUDE)[1]) %>%
subset(longitude < range(df$LONGITUDE)[2]) %>%
subset(latitude > range(df$LATITUDE)[1]) %>%
subset(latitude < range(df$LATITUDE)[2]) %>%
summarise(depth = mean(Topography, na.rm = T)*-1)
zone <- (floor((grid$longitude[1] + 180)/6) %% 60) + 1
xy_utm = as.data.frame(cbind(utm = project(as.matrix(grid[, c("longitude", "latitude")]),
paste0("+proj=utm +units=km +zone=", zone))))
colnames(xy_utm) = c("X", "Y"); plot(xy_utm, pch = ".")
grid = cbind(grid, xy_utm)
grid_year = NULL
year = as.vector(unique(df$year))
for (y in 1:length(year)) {
# y = 1
grid_y = grid
grid_y$year = year[[y]]
grid_year = rbind(grid_year, grid_y)
}
grid_year$depth_scaled = scale(log(grid_year$depth+0.0001))
grid_year$depth_scaled2 = grid_year$depth_scaled ^ 2
grid_year_missing = NULL
for (y in 1:length(missing_year)) {
# y = 1
# Add missing years to our grid:
grid_from_missing_yr <- grid_year[grid_year$year ==  missing_year[[y]]-1, ]
grid_from_missing_yr$year <-  missing_year[[y]] # `L` because `year` is an integer in the data
grid_year_missing <- rbind(grid_year_missing, grid_from_missing_yr)
}
# set the area argument to 0.0081 km2 since our grid cells are 90 m x 90 m = 0.0081 square kilometers
p <- predict(density_model,
newdata = grid_year,
return_tmb_object = T, area = 0.0081)
p$data$sp = sp
sdm_output = p$data
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
geom_tile(aes(height = 0.8, width = 0.8), alpha = 0.8) +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
ggplot(dat, aes_string("X", "Y", fill = column)) +
# geom_tile(aes(height = 0.8, width = 0.8), alpha = 0.8) +
geom_raster() +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
# geom_tile(aes(height = 0.8, width = 0.8), alpha = 0.8) +
geom_raster() +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space.
plot_map_raster(filter(p$data, year == 2015), "zeta_s")
plot_map_raster <- function(dat, column = "est") {
ggplot(dat, aes_string("X", "Y", fill = column)) +
# geom_tile(aes(height = 0.8, width = 0.8), alpha = 0.8) +
geom_raster() +
facet_wrap(~year) +
coord_fixed() +
xlab("Eastings (km)") +
ylab("Northings (km)") +
scale_fill_gradientn(colours = matlab.like(100), "") +
ggdark::dark_theme_minimal()
}
# prediction onto new data grid
load("data/crm/Topography_NOAA_CRM_vol10.RData")
topo <- topo %>% subset(x < -157.5 & x > -158.5 & y > 21 & y < 22) #oahu
grid = topo
grid$longitude = grid$x
grid$latitude = grid$y
grid = grid %>%
group_by(longitude, latitude) %>%
subset(longitude > range(df$LONGITUDE)[1]) %>%
subset(longitude < range(df$LONGITUDE)[2]) %>%
subset(latitude > range(df$LATITUDE)[1]) %>%
subset(latitude < range(df$LATITUDE)[2]) %>%
summarise(depth = mean(Topography, na.rm = T)*-1)
zone <- (floor((grid$longitude[1] + 180)/6) %% 60) + 1
xy_utm = as.data.frame(cbind(utm = project(as.matrix(grid[, c("longitude", "latitude")]),
paste0("+proj=utm +units=km +zone=", zone))))
colnames(xy_utm) = c("X", "Y"); plot(xy_utm, pch = ".")
grid = cbind(grid, xy_utm)
grid_year = NULL
year = as.vector(unique(df$year))
for (y in 1:length(year)) {
# y = 1
grid_y = grid
grid_y$year = year[[y]]
grid_year = rbind(grid_year, grid_y)
}
grid_year$depth_scaled = scale(log(grid_year$depth+0.0001))
grid_year$depth_scaled2 = grid_year$depth_scaled ^ 2
# prediction onto new data grid
load("data/crm/Topography_NOAA_CRM_vol10.RData")
topo <- topo %>% subset(x < -157.5 & x > -158.5 & y > 21 & y < 22) #oahu
grid = topo
grid$longitude = grid$x
grid$latitude = grid$y
grid = grid %>%
group_by(longitude, latitude) %>%
subset(longitude > range(df$LONGITUDE)[1]) %>%
subset(longitude < range(df$LONGITUDE)[2]) %>%
subset(latitude > range(df$LATITUDE)[1]) %>%
subset(latitude < range(df$LATITUDE)[2]) %>%
summarise(depth = mean(Topography, na.rm = T)*-1)
zone <- (floor((grid$longitude[1] + 180)/6) %% 60) + 1
xy_utm = as.data.frame(cbind(utm = project(as.matrix(grid[, c("longitude", "latitude")]),
paste0("+proj=utm +units=km +zone=", zone))))
colnames(xy_utm) = c("X", "Y"); plot(xy_utm, pch = ".")
grid = cbind(grid, xy_utm)
grid_year = NULL
year = as.vector(unique(df$year))
for (y in 1:length(year)) {
# y = 1
grid_y = grid
grid_y$year = year[[y]]
grid_year = rbind(grid_year, grid_y)
}
