sets <- cells[, .SD[sample(.N, strat_sets, replace = resample_cells)],
by = c("sim", "year", "strat")]
sets[, `:=`(cell_sets, .N), by = c("sim", "year", "cell")]
sets$set <- seq(nrow(sets))
sets
setkeyv(sets, c("sim", "year", "cell"))
sp_I <- data.table(sim$sp_N[, c("cell", "year", "N")])
i <- rep(seq(nrow(sp_I)), times = n_sims)
s <- rep(seq(n_sims), each = nrow(sp_I))
sp_I <- sp_I[i, ]
sp_I$sim <- s
setdet <- merge(sets, sp_I, by = c("sim", "year", "cell"))
setdet$n <- stats::rbinom(rep(1, nrow(setdet)),
size = round(setdet$N/setdet$cell_sets),
# prob = (setdet$tow_area/setdet$cell_area) * q(setdet$age))
prob = (setdet$tow_area/setdet$cell_area))
setkeyv(setdet, "set")
setkeyv(sets, "set")
sim$I <- I
sim$setdet <- setdet
setdet <- sim$setdet
data = list(setdet = setdet)
data$setdet <- data$setdet[, c("sim",
"year",
"division",
"strat",
"strat_area",
"tow_area",
"set",
"n"),
with = FALSE]
data = data$setdet
data
metric = "n"
strat_groups = c("sim", "year", "division", "strat", "strat_area", "tow_area")
survey_groups = c("sim", "year")
confidence = 95
Nh <- strat_area <- tow_area <- Wh <- total <- sumYh <- nh <- gh <- meanYh <- varYh <- meanYst_lcl <- meanYst <- varYst <- df <- meanYst_ucl <- sumYst <- N <- sumYst_lcl <- sumYst_ucl <- NULL
lc <- (100 - confidence)/200; lc
uc <- (100 - confidence)/200 + (confidence/100); uc
d <- copy(data)
d <- d[, c(strat_groups, metric), with = FALSE]
setnames(d, names(d), c(strat_groups, "metric"))
setkeyv(d, strat_groups)
strat_tab <- d[, list(sumYh = sum(metric), # sum of samples (n)
meanYh = mean(metric, na.rm = T), # mean of samples (n)
varYh = stats::var(metric, na.rm = T), # variance of samples (n)
nh = .N), # number of strata
by = strat_groups]; strat_tab
strat_tab[, `:=`(Nh, strat_area/tow_area)]; strat_tab
strat_tab[, `:=`(Wh, Nh/sum(Nh)), by = survey_groups]; strat_tab
strat_tab[, `:=`(total, Nh * sumYh/nh)]; strat_tab
strat_tab[, `:=`(gh, Nh * (Nh - nh)/nh)]; strat_tab
survey_tab <- strat_tab[, list(n = sum(nh, na.rm = T),
N = sum(Nh, na.rm = T),
meanYst = sum(Wh * meanYh),
varYst = (1/((sum(Nh))^2)) * sum(gh * varYh),
df = ((sum(gh * varYh))^2)/(sum((gh^2 * varYh^2)/(nh - 1)))), by = survey_groups]; survey_tab
survey_tab[, `:=`(meanYst_lcl, (meanYst - (sqrt(varYst)) * abs(stats::qt(lc, df))))]; survey_tab
survey_tab[, `:=`(meanYst_ucl, (meanYst + (sqrt(varYst)) * abs(stats::qt(lc, df))))]; survey_tab
survey_tab[, `:=`(sumYst, N * meanYst)]; survey_tab
survey_tab[, `:=`(sumYst_lcl, (sumYst - abs(stats::qt(lc, df)) * N * sqrt(varYst)))]; survey_tab
survey_tab[, `:=`(sumYst_ucl, (sumYst + abs(stats::qt(lc, df)) * N * sqrt(varYst)))]; survey_tab
survey_tab[sapply(survey_tab, is.nan)] <- NA
survey_tab <- survey_tab[, c(survey_groups,
"n",
"N",
"df",
"varYst",
"meanYst",
"meanYst_lcl",
"meanYst_ucl",
"sumYst",
"sumYst_lcl",
"sumYst_ucl"),
with = FALSE]
survey_tab$varYst <- sqrt(survey_tab$varYst)
setnames(survey_tab, names(survey_tab), c(survey_groups,
"sets",
"sampling_units",
"df",
"sd",
"mean",
"mean_lcl",
"mean_ucl",
"total",
"total_lcl",
"total_ucl"))
survey_tab
sim$total_strat = survey_tab
total <- NULL
I_hat <- sim$total_strat[, list(sim, year, total)]
names(I_hat) <- c("sim", "year", "I_hat")
I <- data.frame(year = sim$years, I = colSums(sim$I))
comp <- merge(I_hat, I, by = "year")
comp$error <- comp$I_hat - comp$I
means <- error_stats(comp$error)
sim$total_strat_error <- comp
sim$total_strat_error_stats <- means
I_hat <- sim$length_strat[, list(sim, year, length, total)]
sim$total_strat_error_stats
sim$total_strat_error
df = sim$total_strat_error
me = formatC(sim$total_strat_error_stats[1], digits = 3)
mae = formatC(sim$total_strat_error_stats[2], digits = 3)
mse = formatC(sim$total_strat_error_stats[3], digits = 3)
rmse = formatC(sim$total_strat_error_stats[4], digits = 3)
label = paste0("ME = ", me, "\n", "MAE = ", mae, "\n", "MSE = ", mse, "\n", "RMSE = ", rmse)
strata = sim$grid_xy %>%
mutate(x = round(x/0.5, digits = 0),
y = round(y/0.5, digits = 0)) %>%
group_by(x, y) %>%
summarise(strat = round(mean(strat), digits = 0),
depth = mean(depth)) %>%
ggplot(aes(x, y)) +
coord_fixed() +
geom_raster(aes(fill = factor(strat))) +
theme_minimal() +
ylab("Northing (km)") + xlab("Easting (km)") +
theme(legend.position = "none") +
labs(
title = "",
subtitle = paste0(paste0(island, "\n", "# of strata = ", length(unique(sim$grid_xy$strat)))))
if (response_scale == "biomass") ylab_scale = "biomass (g)"
if (response_scale == "count") ylab_scale = "abundance (n)"
sim_output = df %>%
ggplot() +
geom_line(aes(year, I_hat, color = factor(sim), alpha = 0.2), show.legend = F) +
geom_line(aes(year, I), size = 2, color = "red") +
# scale_color_viridis_d() +
# dark_theme_minimal() +
theme_minimal() +
ylab(ylab_scale) +
labs(
title = "",
subtitle = paste0("Survey target = ", sp, "\n",
"Total # of surveyed sites = ", total_sample, "\n",
"Min # of sets per strat = ", min_sets, "\n",
"Number of simulations = ", n_sims))+
annotate(label = label,
geom = "text",
x = Inf,
y = Inf,
size = 4,
hjust = 1,
vjust = 1)
# png(paste0("outputs/", sp, "_", island, ".png"), res = 100, units = "in", height = 4, width = 8)
strata + sim_output
png(paste0("outputs/", sp, "_", island, ".png"), res = 100, units = "in", height = 4, width = 8)
strata + sim_output
dev.off()
n_sims = 100 # number of simulations
total_sample = 100 # total sample efforts you want to deploy
min_sets = 2 # minimum number of sets per strat
set_den = 2/1000 # number of sets per [grid unit = km] squared)
trawl_dim = c(0.01, 0.0353) # 0.000353 sq.km (353 sq.m) from two 15-m diameter survey cylinders
resample_cells = F
n <- id <- division <- strat <- N <- NULL
# sets <- sim_sets(sim,
#                  resample_cells = resample_cells,
#                  n_sims = n_sims,
#                  trawl_dim = trawl_dim,
#                  set_den = set_den,
#                  min_sets = min_sets)
strat_sets <- cell_sets <- NULL
cells <- data.table(rasterToPoints(sim$grid))
strat_det <- cells[, list(strat_cells = .N), by = "strat"]; strat_det
strat_det$tow_area <- prod(trawl_dim); strat_det
strat_det$cell_area <- prod(res(sim$grid)); strat_det
strat_det$strat_area <- strat_det$strat_cells * prod(res(sim$grid)); strat_det
strat_det$strat_sets <- round(strat_det$strat_area * set_den); strat_det
strat_det$strat_sets = round((total_sample * strat_det$strat_area) / sum(strat_det$strat_area), 0); strat_det
strat_det$strat_sets[strat_det$strat_sets < min_sets] <- min_sets; strat_det # make sure minimum number of sets per strat is not 0 or 1
cells <- merge(cells, strat_det, by = c("strat")) # add "strat" "strat_cells" "tow_area" ...
i <- rep(seq(nrow(cells)), times = length(sim$years)) # number of cells * number of years
y <- rep(sim$years, each = nrow(cells)) # number of years * number of cells
cells <- cells[i, ] # increase the number of rows by number or years
cells$year <- y
i <- rep(seq(nrow(cells)), times = n_sims) # number of cells * number of simulations
s <- rep(seq(n_sims), each = nrow(cells)) # number of simulations * number of cells
cells <- cells[i, ] # increase the number of rows by number or simulations
cells$sim <- s
# .SD = "Subset of Data.table"
# .N = number of instances
# strat_sets, see unique(cells$strat_sets)
sets <- cells[, .SD[sample(.N, strat_sets, replace = resample_cells)],
by = c("sim", "year", "strat")]
sets[, `:=`(cell_sets, .N), by = c("sim", "year", "cell")]
sets$set <- seq(nrow(sets))
sets
setkeyv(sets, c("sim", "year", "cell"))
sp_I <- data.table(sim$sp_N[, c("cell", "year", "N")])
i <- rep(seq(nrow(sp_I)), times = n_sims)
s <- rep(seq(n_sims), each = nrow(sp_I))
sp_I <- sp_I[i, ]
sp_I$sim <- s
setdet <- merge(sets, sp_I, by = c("sim", "year", "cell"))
setdet$n <- stats::rbinom(rep(1, nrow(setdet)),
size = round(setdet$N/setdet$cell_sets),
# prob = (setdet$tow_area/setdet$cell_area) * q(setdet$age))
prob = (setdet$tow_area/setdet$cell_area))
setkeyv(setdet, "set")
setkeyv(sets, "set")
sim$I <- I
sim$setdet <- setdet
setdet <- sim$setdet
data = list(setdet = setdet)
data$setdet <- data$setdet[, c("sim",
"year",
"division",
"strat",
"strat_area",
"tow_area",
"set",
"n"),
with = FALSE]
data = data$setdet
data
metric = "n"
strat_groups = c("sim", "year", "division", "strat", "strat_area", "tow_area")
survey_groups = c("sim", "year")
confidence = 95
Nh <- strat_area <- tow_area <- Wh <- total <- sumYh <- nh <- gh <- meanYh <- varYh <- meanYst_lcl <- meanYst <- varYst <- df <- meanYst_ucl <- sumYst <- N <- sumYst_lcl <- sumYst_ucl <- NULL
lc <- (100 - confidence)/200; lc
uc <- (100 - confidence)/200 + (confidence/100); uc
d <- copy(data)
d <- d[, c(strat_groups, metric), with = FALSE]
setnames(d, names(d), c(strat_groups, "metric"))
setkeyv(d, strat_groups)
strat_tab <- d[, list(sumYh = sum(metric), # sum of samples (n)
meanYh = mean(metric, na.rm = T), # mean of samples (n)
varYh = stats::var(metric, na.rm = T), # variance of samples (n)
nh = .N), # number of strata
by = strat_groups]; strat_tab
strat_tab[, `:=`(Nh, strat_area/tow_area)]; strat_tab
strat_tab[, `:=`(Wh, Nh/sum(Nh)), by = survey_groups]; strat_tab
strat_tab[, `:=`(total, Nh * sumYh/nh)]; strat_tab
strat_tab[, `:=`(gh, Nh * (Nh - nh)/nh)]; strat_tab
survey_tab <- strat_tab[, list(n = sum(nh, na.rm = T),
N = sum(Nh, na.rm = T),
meanYst = sum(Wh * meanYh),
varYst = (1/((sum(Nh))^2)) * sum(gh * varYh),
df = ((sum(gh * varYh))^2)/(sum((gh^2 * varYh^2)/(nh - 1)))), by = survey_groups]; survey_tab
survey_tab[, `:=`(meanYst_lcl, (meanYst - (sqrt(varYst)) * abs(stats::qt(lc, df))))]; survey_tab
survey_tab[, `:=`(meanYst_ucl, (meanYst + (sqrt(varYst)) * abs(stats::qt(lc, df))))]; survey_tab
survey_tab[, `:=`(sumYst, N * meanYst)]; survey_tab
survey_tab[, `:=`(sumYst_lcl, (sumYst - abs(stats::qt(lc, df)) * N * sqrt(varYst)))]; survey_tab
survey_tab[, `:=`(sumYst_ucl, (sumYst + abs(stats::qt(lc, df)) * N * sqrt(varYst)))]; survey_tab
survey_tab[sapply(survey_tab, is.nan)] <- NA
survey_tab <- survey_tab[, c(survey_groups,
"n",
"N",
"df",
"varYst",
"meanYst",
"meanYst_lcl",
"meanYst_ucl",
"sumYst",
"sumYst_lcl",
"sumYst_ucl"),
with = FALSE]
survey_tab$varYst <- sqrt(survey_tab$varYst)
setnames(survey_tab, names(survey_tab), c(survey_groups,
"sets",
"sampling_units",
"df",
"sd",
"mean",
"mean_lcl",
"mean_ucl",
"total",
"total_lcl",
"total_ucl"))
survey_tab
sim$total_strat = survey_tab
total <- NULL
I_hat <- sim$total_strat[, list(sim, year, total)]
names(I_hat) <- c("sim", "year", "I_hat")
I <- data.frame(year = sim$years, I = colSums(sim$I))
comp <- merge(I_hat, I, by = "year")
comp$error <- comp$I_hat - comp$I
means <- error_stats(comp$error)
sim$total_strat_error <- comp
sim$total_strat_error_stats <- means
I_hat <- sim$length_strat[, list(sim, year, length, total)]
sim$total_strat_error_stats
sim$total_strat_error
df = sim$total_strat_error
me = formatC(sim$total_strat_error_stats[1], digits = 3)
mae = formatC(sim$total_strat_error_stats[2], digits = 3)
mse = formatC(sim$total_strat_error_stats[3], digits = 3)
rmse = formatC(sim$total_strat_error_stats[4], digits = 3)
label = paste0("ME = ", me, "\n", "MAE = ", mae, "\n", "MSE = ", mse, "\n", "RMSE = ", rmse)
strata = sim$grid_xy %>%
mutate(x = round(x/0.5, digits = 0),
y = round(y/0.5, digits = 0)) %>%
group_by(x, y) %>%
summarise(strat = round(mean(strat), digits = 0),
depth = mean(depth)) %>%
ggplot(aes(x, y)) +
coord_fixed() +
geom_raster(aes(fill = factor(strat))) +
theme_minimal() +
ylab("Northing (km)") + xlab("Easting (km)") +
theme(legend.position = "none") +
labs(
title = "",
subtitle = paste0(paste0(island, "\n", "# of strata = ", length(unique(sim$grid_xy$strat)))))
if (response_scale == "biomass") ylab_scale = "biomass (g)"
if (response_scale == "count") ylab_scale = "abundance (n)"
sim_output = df %>%
ggplot() +
geom_line(aes(year, I_hat, color = factor(sim), alpha = 0.2), show.legend = F) +
geom_line(aes(year, I), size = 2, color = "red") +
# scale_color_viridis_d() +
# dark_theme_minimal() +
theme_minimal() +
ylab(ylab_scale) +
labs(
title = "",
subtitle = paste0("Survey target = ", sp, "\n",
"Total # of surveyed sites = ", total_sample, "\n",
"Min # of sets per strat = ", min_sets, "\n",
"Number of simulations = ", n_sims))+
annotate(label = label,
geom = "text",
x = Inf,
y = Inf,
size = 4,
hjust = 1,
vjust = 1)
png(paste0("outputs/", sp, "_", island, ".png"), res = 100, units = "in", height = 4, width = 8)
strata + sim_output
dev.off()
strata + sim_output
# clean work station
rm(list = ls())
library(raster)
library(dplyr)
library(ggplot2)
library(readr)
# set working directory
setwd(paste0("/Users/", Sys.info()[7], "/Desktop"))
# load spatial grid
df = raster("jplG1SST_b799_dd6c_7662.nc") # spatial grids around MHIs around at 1-km resolution
# clean work station
rm(list = ls())
<<<<<<< HEAD
region = "MHI"
uku_or_not = F
islands = c("Kauai", #1
"Lehua", #2
"Niihau", #3
"Kaula", #4
"Oahu", #5
"Molokai", #6
"Maui", #7
"Lanai", #8
"Molokini", #9
"Kahoolawe", #10
"Hawaii")[5]
response_variable = "fish_count";      sp = ifelse(uku_or_not == T, "Aprion virescens", "Chromis vanderbilti")
response_variable = "fish_biomass";    sp = ifelse(uku_or_not == T, "Aprion virescens", "Acanthurus olivaceus")
response_variable = "trophic_biomass"; sp = c("PISCIVORE", "PLANKTIVORE", "PRIMARY", "SECONDARY")[2]
if (response_variable == "fish_count") {
load("data/rea/ALL_REA_FISH_RAW.rdata")
df = df %>%
subset(REGION == region & ISLAND %in% islands) %>%
# mutate(response = ifelse(TAXONNAME == sp, COUNT*100, 0)) %>%
mutate(response = ifelse(TAXONNAME == sp, COUNT, 0)) %>%
group_by(LONGITUDE, LATITUDE, ISLAND, OBS_YEAR, DATE_, DEPTH) %>%
summarise(response = sum(response, na.rm = T))
df %>% ggplot(aes(response)) + geom_histogram() +
df %>% group_by(OBS_YEAR) %>% summarise(n = mean(response)) %>% ggplot(aes(OBS_YEAR, n)) + geom_line()
}
if (response_variable == "fish_biomass") {
load("data/rea/ALL_REA_FISH_RAW.rdata")
df = df %>%
subset(REGION == region & ISLAND %in% islands) %>%
mutate(response = ifelse(TAXONNAME == sp, BIOMASS_G_M2, 0)) %>%
# mutate(response = ifelse(TAXONNAME == sp, BIOMASS_G_M2*0.001, 0)) %>%
group_by(LONGITUDE, LATITUDE, ISLAND, OBS_YEAR, DATE_, DEPTH) %>%
summarise(response = sum(response, na.rm = T))
df %>% ggplot(aes(response)) + geom_histogram() +
df %>% group_by(OBS_YEAR) %>% summarise(n = median(response)) %>% ggplot(aes(OBS_YEAR, n)) + geom_line()
}
if (response_variable == "trophic_biomass") {
load("data/rea/ALL_REA_FISH_RAW.rdata")
df = df %>%
subset(REGION == region & ISLAND %in% islands) %>%
mutate(response = ifelse(TROPHIC_MONREP == sp, BIOMASS_G_M2*0.001, 0)) %>%
group_by(LONGITUDE, LATITUDE, ISLAND, OBS_YEAR, DATE_, DEPTH) %>%
summarise(response = sum(response, na.rm = T))
df %>% ggplot(aes(response)) + geom_histogram() +
df %>% group_by(OBS_YEAR) %>% summarise(n = median(response)) %>% ggplot(aes(OBS_YEAR, n)) + geom_line()
}
if (response_variable == "coral_cover") {
load("data/BenthicCover_2010-2020_Tier1_SITE_MHI_w_CRM.RData") #live coral cover, only for MHI, with CRM_Bathy data
df = df %>%
subset(REGION == region & ISLAND %in% islands) %>%
mutate(response = CORAL,
DEPTH = ifelse(DEPTH_e == 0, DEPTH_e*-1 + 0.1, DEPTH_e*-1)) %>%
group_by(LONGITUDE, LATITUDE, ISLAND, OBS_YEAR, DATE_, DEPTH) %>%
summarise(response = median(response, na.rm = T),
n = n())
hist(df$response, main = paste0(sp, "_cover"))
}
if (response_variable == "coral_density") {
load("data/BenthicREA_sitedata_TAXONCODE.RData_MHI_w_CRM.RData") #live coral cover, only for MHI, with CRM_Bathy data
if (sp == "AdColDen") df = df %>% mutate(response = AdColDen)
if (sp == "JuvColDen") df = df %>% mutate(response = JuvColDen)
df = df %>%
subset(REGION == region & ISLAND %in% islands) %>%
mutate( DEPTH = ifelse(DEPTH_e == 0, DEPTH_e*-1 + 0.1, DEPTH_e*-1)) %>%
group_by(LONGITUDE, LATITUDE, ISLAND, OBS_YEAR, DATE_, DEPTH) %>%
summarise(response = sum(response, na.rm = T))
hist(df$response, main = paste0(sp, "_coral_density"))
}
# north-south gradient
df %>%
group_by(ISLAND) %>%
summarise(n = mean(response, na.rm = T),
lat = mean(LATITUDE)) %>%
arrange(desc(lat))
zone <- (floor((df$LONGITUDE[1] + 180)/6) %% 60) + 1
xy_utm = as.data.frame(cbind(utm = project(as.matrix(df[, c("LONGITUDE", "LATITUDE")]), paste0("+proj=utm +units=km +zone=", zone))))
colnames(xy_utm) = c("X", "Y")
df = cbind(df, xy_utm)
n_knots = 300
# n_knots = 100 # a coarse mesh for speed
rea_spde <- make_mesh(df, c("X", "Y"), n_knots = n_knots, type = "cutoff_search")
# par(mfrow = c(1,2))
# plot(xy_utm, pch = ".", bty = 'n')
plot(rea_spde, pch = ".", bty = "n"); axis(1); axis(2)
png("outputs/SPDE_mesh_field.png", height = 5, width = 5, units = "in", res = 100)
# par(mfrow = c(1,2))
# plot(xy_utm, pch = ".", bty = 'n')
plot(rea_spde, pch = ".", bty = "n"); axis(1); axis(2)
dev.off()
n_knots = 100 # a coarse mesh for speed
rea_spde <- make_mesh(df, c("X", "Y"), n_knots = n_knots, type = "cutoff_search")
# par(mfrow = c(1,2))
# plot(xy_utm, pch = ".", bty = 'n')
plot(rea_spde, pch = ".", bty = "n"); axis(1); axis(2)
png("outputs/SPDE_mesh_field.png", height = 5, width = 5, units = "in", res = 100)
# par(mfrow = c(1,2))
# plot(xy_utm, pch = ".", bty = 'n')
plot(rea_spde, pch = ".", bty = "n"); axis(1); axis(2)
dev.off()
n_knots = 300
rea_spde <- make_mesh(df, c("X", "Y"), n_knots = n_knots, type = "cutoff_search")
png(paste0("outputs/SPDE_mesh_field_", n_knots, ".png"), height = 5, width = 5, units = "in", res = 100)
# par(mfrow = c(1,2))
# plot(xy_utm, pch = ".", bty = 'n')
plot(rea_spde, pch = ".", bty = "n"); axis(1); axis(2)
dev.off()
n_knots = 100 # a coarse mesh for speed
rea_spde <- make_mesh(df, c("X", "Y"), n_knots = n_knots, type = "cutoff_search")
png(paste0("outputs/SPDE_mesh_field_", n_knots, ".png"), height = 5, width = 5, units = "in", res = 100)
# par(mfrow = c(1,2))
# plot(xy_utm, pch = ".", bty = 'n')
plot(rea_spde, pch = ".", bty = "n"); axis(1); axis(2)
dev.off()
=======
library(raster)
library(dplyr)
library(ggplot2)
library(readr)
# set working directory
setwd(paste0("/Users/", Sys.info()[7], "/Desktop"))
# load spatial grid
df = raster("jplG1SST_b799_dd6c_7662.nc") # spatial grids around MHIs around at 1-km resolution
df = rasterToPoints(df)
df = as.data.frame(df[,1:2])
df$x = ifelse(df$x < 0, df$x + 360, df$x)
# load Maya's list of islands
is = read.csv("Reference Spreadsheet - Island_Extents.csv")
is$LEFT_XMIN = ifelse(is$LEFT_XMIN < 0, is$LEFT_XMIN + 360, is$LEFT_XMIN)
is$RIGHT_XMAX = ifelse(is$RIGHT_XMAX < 0, is$RIGHT_XMAX + 360, is$RIGHT_XMAX)
islands = is$ISLAND.CODE
# loop through the list, assign spatial sectors (NW, NE, SW, SE) for each island
mayas_islands = NULL
for (i in 1:length(islands)) {
# i = 1
island = is %>% subset(ISLAND.CODE == islands[i])
grid = df %>%
subset(x > island$RIGHT_XMAX) %>%
subset(x < island$LEFT_XMIN) %>%
subset(y < island$BOTTOM_YMIN) %>%
subset(y > island$TOP_YMAX)
grid$island = islands[i]
grid = grid %>%
group_by(island) %>%
mutate(medianY = median(y),
medianX = median(x),
NS = ifelse(y < medianY, "S", "N"),
EW = ifelse(x < medianX, "W", "E"),
NSEW = paste0(NS, EW))
mayas_islands = rbind(grid, mayas_islands)
print(islands[i])
}
# plot and check output
mayas_islands %>%
ggplot(aes(x, y, fill = NSEW)) +
geom_raster() +
scale_fill_viridis_d("") +
facet_wrap(.~island, scale = "free") +
theme_void()
colnames(mayas_islands)[1:2] = c("lon", "lat")
# export as a csv file
write_csv(mayas_islands, "Mayas_Islands.csv")
>>>>>>> f08a77348b9cca5533ffcab76f345be7f2eea586
